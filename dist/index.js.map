{"version":3,"sources":["../src/index.js"],"names":["handleOutOfOrderSloppy","queuedOps","remoteOps","newOps","Operative","httpClient","webSocket","handleOutOfOrder","persister","onChange","records","operationsEnqueuedForServer","lastSync","operationsToSendToServer","then","operationsToApply","console","log","e","set","itemsToRemove","idsToRemove","map","o","id","filter","includes","get","operations","data","readyState","WebSocket","OPEN","message","JSON","stringify","send","Promise","resolve","post","headers","Date","getTime","reduce","operation","action","record","recordId","attributes","save","socket","onopen","onclose","onmessage","parse","Error","length","createOperation","updateOperation","recordToDelete","deleteOperation","OperativeFactory","create","load","persistedData"],"mappings":"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","sourcesContent":["import uuid from 'uuid/v4';\n\n// queuedOps are already applied locally, so for this implementation don't need to apply again\n// but do need to pass them in here in case future algorithms need them\nexport const handleOutOfOrderSloppy = ({\n  // eslint-disable-next-line no-unused-vars\n  queuedOps,\n  remoteOps,\n  newOps = [],\n}) => [...remoteOps, ...newOps];\n\nclass Operative {\n  #httpClient;\n  #webSocket;\n  #handleOutOfOrder;\n  #persister;\n  #onChange;\n  #records;\n  #operationsEnqueuedForServer;\n  #lastSync;\n\n  constructor({\n    httpClient,\n    webSocket,\n    handleOutOfOrder,\n    persister,\n    onChange,\n    records = [],\n    operationsEnqueuedForServer = [],\n    lastSync = null,\n  } = {}) {\n    if (!httpClient) throw new Error('httpClient must be provided');\n    if (!handleOutOfOrder) throw new Error('handleOutOfOrder must be provided');\n    if (!persister) throw new Error('persister must be provided');\n\n    this.#httpClient = httpClient;\n    this.#webSocket = webSocket;\n    this.#handleOutOfOrder = handleOutOfOrder;\n    this.#persister = persister;\n    this.#onChange = onChange;\n    this.#records = records;\n    this.#operationsEnqueuedForServer = operationsEnqueuedForServer;\n    this.#lastSync = lastSync;\n\n    this.#setUpWebSocket();\n  }\n\n  loadAll() {\n    return this.#httpClient.get('/').then(({ data }) => {\n      this.#records = data;\n      this.#trackLastSync();\n      this.#persist();\n    });\n  }\n\n  get records() {\n    return this.#records;\n  }\n\n  sync() {\n    const queuedOps = this.#operationsEnqueuedForServer; // A\n    console.log({ queuedOps });\n\n    if (queuedOps.length === 0) {\n      return this.#getOperations().then(this.#applyOperations);\n    }\n\n    return this.#sendOperations(queuedOps).then(remoteOps => {\n      const operationsToApply = this.#handleOutOfOrder({\n        remoteOps,\n        queuedOps,\n      });\n      // Just receives C back\n      // Call the reconciliation function here, with A and C, and B is empty\n      this.#applyOperations(operationsToApply);\n      this.#operationsEnqueuedForServer = [];\n    });\n  }\n\n  create(attributes) {\n    const createOperation = {\n      action: 'create',\n      id: uuid(),\n      recordId: uuid(),\n      attributes,\n    };\n\n    return this.#sendOperationsWithQueueing([createOperation]).then(\n      this.#applyOperations\n    );\n  }\n\n  update(record, attributes) {\n    const updateOperation = {\n      action: 'update',\n      id: uuid(),\n      recordId: record.id,\n      attributes,\n    };\n    return this.#sendOperationsWithQueueing([updateOperation]).then(\n      this.#applyOperations\n    );\n  }\n\n  delete(recordToDelete) {\n    const deleteOperation = {\n      action: 'delete',\n      id: uuid(),\n      recordId: recordToDelete.id,\n    };\n    return this.#sendOperationsWithQueueing([deleteOperation]).then(\n      this.#applyOperations\n    );\n  }\n\n  #operationsUrl = () => `/operations?since=${this.#lastSync}`;\n\n  #sendOperationsWithQueueing = newOps => {\n    const queuedOps = this.#operationsEnqueuedForServer;\n\n    // A = this.#operationsEnqueuedForServer\n    // B = operations\n    const operationsToSendToServer = [...queuedOps, ...newOps];\n\n    // Sends A and B\n    return this.#sendOperations(operationsToSendToServer)\n      .then(remoteOps => {\n        const operationsToApply = this.#handleOutOfOrder({\n          remoteOps,\n          newOps,\n          queuedOps,\n        });\n        console.log({\n          newOps,\n          queuedOps,\n          remoteOps,\n          operationsToSendToServer,\n          operationsToApply,\n        });\n        this.#operationsEnqueuedForServer = [];\n        return operationsToApply;\n      })\n      .catch(e => {\n        console.log(e);\n        this.#operationsEnqueuedForServer = operationsToSendToServer;\n\n        // resolve to allow applying operations locally\n        return newOps;\n      });\n  };\n\n  #removeFromSet = ({ set, itemsToRemove }) => {\n    const idsToRemove = itemsToRemove.map(o => o.id);\n    return set.filter(o => !idsToRemove.includes(o.id));\n  };\n\n  #getOperations = () => {\n    return this.#httpClient\n      .get(this.#operationsUrl())\n      .then(({ data: operations }) => operations);\n  };\n\n  #sendOperations = operations => {\n    console.log('#sendOperations', { operations });\n\n    if (this.#webSocket && this.#webSocket.readyState === WebSocket.OPEN) {\n      console.log('sending via web socket');\n      const message = JSON.stringify(operations);\n      this.#webSocket.send(message);\n      return Promise.resolve([]);\n    } else {\n      console.log('sending via http');\n      return this.#httpClient\n        .post(this.#operationsUrl(), operations, {\n          headers: { 'Content-Type': 'application/json' },\n        })\n        .then(({ data: operations }) => operations);\n    }\n  };\n\n  #trackLastSync = () => {\n    this.#lastSync = new Date().getTime();\n  };\n\n  #applyOperations = operations => {\n    this.#records = operations.reduce(this.#applyOperation, this.#records);\n    this.#trackLastSync();\n    this.#persist();\n    if (this.#onChange) {\n      this.#onChange(this.#records);\n    }\n  };\n\n  #applyOperation = (records, operation) => {\n    switch (operation.action) {\n      case 'create': {\n        const record = {\n          id: operation.recordId,\n          ...operation.attributes, // TODO: handle server-generated attributes. Or maybe we can't have those in this model. at least dates?\n        };\n        return [...records, record];\n      }\n      case 'update':\n        return records.map(record =>\n          record.id === operation.recordId\n            ? { ...record, ...operation.attributes }\n            : record\n        );\n      case 'delete':\n        return records.filter(record => record.id !== operation.recordId);\n    }\n  };\n\n  #persist = () => {\n    const data = {\n      records: this.#records,\n      operationsEnqueuedForServer: this.#operationsEnqueuedForServer,\n      lastSync: this.#lastSync,\n    };\n    this.#persister.save(data);\n  };\n\n  #setUpWebSocket = () => {\n    const socket = this.#webSocket;\n\n    socket.onopen = () => {\n      console.log('Web socket connected');\n    };\n\n    socket.onclose = () => {\n      console.log('Web socket closed');\n    };\n\n    socket.onmessage = ({ data: message }) => {\n      const operations = JSON.parse(message);\n      console.log(`Operations: ${message}`);\n      this.#applyOperations(operations);\n    };\n  };\n}\n\nconst OperativeFactory = {\n  create: ({\n    httpClient,\n    webSocket,\n    handleOutOfOrder,\n    persister,\n    onChange,\n  } = {}) => {\n    if (!persister) throw new Error('persister must be provided');\n\n    return persister.load().then(persistedData => {\n      return new Operative({\n        httpClient,\n        webSocket,\n        handleOutOfOrder,\n        persister,\n        onChange,\n        ...persistedData,\n      });\n    });\n  },\n};\n\nexport default OperativeFactory;\n"],"file":"index.js"}